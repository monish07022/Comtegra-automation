---
- name: Get Rancher cluster registration command with correct checksum
  hosts: localhost
  gather_facts: false
  vars:
    rancher_url: "https://192.168.210.118"
    api_token: "token-dp6np:fngmsbrhnj2h2vt9v89hm8hzcssk2msq7sq5jnq45zqfng5j87g89c"
    cluster_name: "{{ cluster_name }}"
    # Hardcode only the correct checksum
    correct_checksum: "c0d7f2de1be3206f9f4fe5311fb689c6029a3a0215ea4b3f4bebd628a617cee9"

  tasks:
    - name: Fetch cluster details
      uri:
        url: "{{ rancher_url }}/v3/clusters?name={{ cluster_name }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: cluster_list_response

    - name: Fail if cluster not found
      fail:
        msg: "Cluster named {{ cluster_name }} not found!"
      when: cluster_list_response.json.data | length == 0

    - name: Set cluster ID
      set_fact:
        cluster_id: "{{ cluster_list_response.json.data[0].id }}"

    - name: Fetch registration tokens for this cluster
      uri:
        url: "{{ rancher_url }}/v3/clusterregistrationtokens?clusterId={{ cluster_id }}"
        method: GET
        headers:
          Authorization: "Bearer {{ api_token }}"
          Content-Type: "application/json"
        validate_certs: false
      register: tokens_response

    - name: Fail if no registration tokens found
      fail:
        msg: "No registration tokens found for cluster {{ cluster_name }}!"
      when: tokens_response.json.data | length == 0

    - name: Set token fact (generated through API)
      set_fact:
        token: "{{ tokens_response.json.data[0].token }}"

    - name: Build final registration command with correct checksum
      set_fact:
        registration_cmd: "curl --insecure -fL {{ rancher_url }}/system-agent-install.sh | sudo sh -s - --server {{ rancher_url }} --label 'cattle.io/os=linux' --token {{ token }} --ca-checksum {{ correct_checksum }} --etcd --controlplane --worker"

    - name: Print the final registration command
      debug:
        msg: "{{ registration_cmd }}"

    - name: Create registration script file
      copy:
        content: |
          #!/bin/bash
          {{ registration_cmd }}
        dest: "./register-{{ cluster_name }}.sh"
        mode: '0755'

    - name: Display success message
      debug:
        msg: |
          ✅ Registration command generated successfully!
          
          🔑 Token: {{ token }} (generated through API)
          🔐 CA Checksum: {{ correct_checksum }} (hardcoded correct value)
          
          📁 Script created: ./register-{{ cluster_name }}.sh
          
          Usage: ./register-{{ cluster_name }}.sh
